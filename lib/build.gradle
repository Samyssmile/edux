plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "me.champeau.jmh" version "0.7.2"
}

group = 'io.github.samyssmile'
version = '1.0.7'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

jmh {
    resultFormat = 'JSON'
    resultsFile = file("benchmark-results.json")
}

dependencies {
    String osString = getOsString()
    String archString = getArchString()
    String classifier = "${osString}-${archString}"
    String jCudaVersion = '11.8.0'

    // JCuda dependencies
    ['jcuda', 'jcublas', 'jcufft', 'jcusparse', 'jcurand', 'jcusolver', 'jcudnn'].each { lib ->
        implementation(group: 'org.jcuda', name: "${lib}", version: jCudaVersion) {
            transitive = false
        }
        implementation(group: 'org.jcuda', name: "${lib}-natives", classifier: classifier, version: jCudaVersion)
    }

    // JMH dependencies
    implementation 'org.openjdk.jmh:jmh-core:1.37'
    implementation 'org.openjdk.jmh:jmh-generator-annprocess:1.37'

    // Other dependencies
    implementation 'com.opencsv:opencsv:5.8'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0'

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.7.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
}

tasks.withType(Test) {
    useJUnitPlatform()
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar

            pom {
                name = 'Edux'
                description = 'Educational library for machine learning challenges'
                url = 'https://github.com/Samyssmile/edux'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'samyssmile'
                        name = 'Samuel Abramov'
                        email = 'publish@abramov-samuel.de'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Samyssmile/edux.git'
                    developerConnection = 'scm:git:ssh://github.com/Samyssmile/edux.git'
                    url = 'https://github.com/Samyssmile/edux'
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = version.endsWith('SNAPSHOT') ? 'https://s01.oss.sonatype.org/content/repositories/snapshots/' : 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


static String getOsString() {
    String vendor = System.getProperty("java.vendor");
    if ("The Android Project" == vendor) {
        return "android";
    } else {
        String osName = System.getProperty("os.name");
        osName = osName.toLowerCase(Locale.ENGLISH);
        if (osName.startsWith("windows")) {
            return "windows";
        } else if (osName.startsWith("mac os")) {
            return "apple";
        } else if (osName.startsWith("linux")) {
            return "linux";
        } else if (osName.startsWith("sun")) {
            return "sun"
        }
        return "unknown"
    }
}

static String getArchString() {
    String osArch = System.getProperty("os.arch");
    osArch = osArch.toLowerCase(Locale.ENGLISH);
    if ("i386" == osArch || "x86" == osArch || "i686" == osArch) {
        return "x86";
    } else if (osArch.startsWith("amd64") || osArch.startsWith("x86_64")) {
        return "x86_64";
    } else if (osArch.startsWith("arm64")) {
        return "arm64";
    } else if (osArch.startsWith("arm")) {
        return "arm";
    } else if ("ppc" == osArch || "powerpc" == osArch) {
        return "ppc";
    } else if (osArch.startsWith("ppc")) {
        return "ppc_64";
    } else if (osArch.startsWith("sparc")) {
        return "sparc";
    } else if (osArch.startsWith("mips64")) {
        return "mips64";
    } else if (osArch.startsWith("mips")) {
        return "mips";
    } else if (osArch.contains("risc")) {
        return "risc";
    }
    return "unknown";
}

