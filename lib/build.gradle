plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "me.champeau.jmh" version "0.7.2"
    id 'com.github.ben-manes.versions' version '0.51.0'
}

group = 'io.github.samyssmile'
version = '1.0.7'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

jmh {
    resultFormat = 'JSON'
    resultsFile = file("benchmark-results.json")
}

dependencies {

    // JMH dependencies
    implementation 'org.openjdk.jmh:jmh-core:1.37'
    implementation 'org.openjdk.jmh:jmh-generator-annprocess:1.37'

    // Other dependencies
    implementation 'com.opencsv:opencsv:5.9'
    implementation 'org.apache.logging.log4j:log4j-api:3.0.0-beta2'
    implementation 'org.apache.logging.log4j:log4j-core:3.0.0-beta2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:3.0.0-beta2'

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.3'
    testImplementation 'org.mockito:mockito-core:5.11.3'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.14.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'
}

tasks.withType(Test) {
    useJUnitPlatform()
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar

            pom {
                name = 'Edux'
                description = 'Educational library for machine learning challenges'
                url = 'https://github.com/Samyssmile/edux'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'samyssmile'
                        name = 'Samuel Abramov'
                        email = 'publish@abramov-samuel.de'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Samyssmile/edux.git'
                    developerConnection = 'scm:git:ssh://github.com/Samyssmile/edux.git'
                    url = 'https://github.com/Samyssmile/edux'
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = version.endsWith('SNAPSHOT') ? 'https://s01.oss.sonatype.org/content/repositories/snapshots/' : 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}



