plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'io.github.samyssmile'
version = '1.0.5'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.ejml:ejml-core:0.43.1'
    implementation 'org.ejml:ejml-ddense:0.43.1'
    implementation 'org.ejml:ejml-simple:0.43.1'
    implementation 'com.opencsv:opencsv:5.8'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0'
    api 'org.apache.commons:commons-math3:3.6.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
}

testing {
    suites {
        test {
            useJUnitJupiter('5.10.0')
        }
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    javadoc.destinationDir = file("${rootProject.projectDir}/docs/javadocs") // Definiert das Ausgabeverzeichnis f√ºr die generierten JavaDocs.
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.github.samyssmile'
            artifactId = 'edux'
            version = '1.0.5'
            from components.java
            artifact sourceJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Edux'
                description = 'Educational library for machine learning challenges'
                url = 'https://github.com/Samyssmile/edux'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'samyssmile'
                        name = 'Samuel Abramov'
                        email = 'publish@abramov-samuel.de'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Samyssmile/edux.git'
                    developerConnection = 'scm:git:ssh://github.com/Samyssmile/edux.git'
                    url = 'https://github.com/Samyssmile/edux'
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = version.endsWith('SNAPSHOT') ? 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                    : 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
